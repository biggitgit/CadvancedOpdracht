// <auto-generated />
using System;
using CadvancedOpdracht.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CadvancedOpdracht.Migrations
{
    [DbContext(typeof(CadvancedOpdrachtContext))]
    [Migration("20240618092649_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CadvancedOpdracht.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson"
                        });
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit");

                    b.Property<int?>("LandlordId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("LandlordId");

                    b.HasIndex("LocationId");

                    b.ToTable("Image", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            IsCover = true,
                            Url = "url_van_afbeelding_1"
                        },
                        new
                        {
                            ImageId = 2,
                            IsCover = false,
                            Url = "url_van_afbeelding_2"
                        },
                        new
                        {
                            ImageId = 3,
                            IsCover = true,
                            Url = "url_van_afbeelding_3"
                        },
                        new
                        {
                            ImageId = 4,
                            IsCover = true,
                            LocationId = 1,
                            Url = "url_van_afbeelding_1"
                        },
                        new
                        {
                            ImageId = 5,
                            IsCover = false,
                            LocationId = 1,
                            Url = "url_van_afbeelding_2"
                        },
                        new
                        {
                            ImageId = 6,
                            IsCover = true,
                            LocationId = 2,
                            Url = "url_van_afbeelding_3"
                        },
                        new
                        {
                            ImageId = 7,
                            IsCover = false,
                            LocationId = 2,
                            Url = "url_van_afbeelding_4"
                        },
                        new
                        {
                            ImageId = 8,
                            IsCover = true,
                            LocationId = 3,
                            Url = "url_van_afbeelding_5"
                        },
                        new
                        {
                            ImageId = 9,
                            IsCover = false,
                            LocationId = 3,
                            Url = "url_van_afbeelding_6"
                        },
                        new
                        {
                            ImageId = 10,
                            IsCover = true,
                            LocationId = 4,
                            Url = "url_van_afbeelding_7"
                        },
                        new
                        {
                            ImageId = 11,
                            IsCover = false,
                            LocationId = 4,
                            Url = "url_van_afbeelding_8"
                        },
                        new
                        {
                            ImageId = 12,
                            IsCover = true,
                            LocationId = 5,
                            Url = "url_van_afbeelding_9"
                        },
                        new
                        {
                            ImageId = 13,
                            IsCover = false,
                            LocationId = 5,
                            Url = "url_van_afbeelding_10"
                        },
                        new
                        {
                            ImageId = 14,
                            IsCover = true,
                            LocationId = 6,
                            Url = "url_van_afbeelding_11"
                        },
                        new
                        {
                            ImageId = 15,
                            IsCover = false,
                            LocationId = 6,
                            Url = "url_van_afbeelding_12"
                        },
                        new
                        {
                            ImageId = 16,
                            IsCover = true,
                            LocationId = 7,
                            Url = "url_van_afbeelding_13"
                        },
                        new
                        {
                            ImageId = 17,
                            IsCover = false,
                            LocationId = 7,
                            Url = "url_van_afbeelding_14"
                        },
                        new
                        {
                            ImageId = 18,
                            IsCover = true,
                            LocationId = 8,
                            Url = "url_van_afbeelding_15"
                        },
                        new
                        {
                            ImageId = 19,
                            IsCover = false,
                            LocationId = 8,
                            Url = "url_van_afbeelding_16"
                        },
                        new
                        {
                            ImageId = 20,
                            IsCover = true,
                            LocationId = 9,
                            Url = "url_van_afbeelding_17"
                        },
                        new
                        {
                            ImageId = 21,
                            IsCover = false,
                            LocationId = 9,
                            Url = "url_van_afbeelding_18"
                        },
                        new
                        {
                            ImageId = 22,
                            IsCover = true,
                            LocationId = 10,
                            Url = "url_van_afbeelding_19"
                        },
                        new
                        {
                            ImageId = 23,
                            IsCover = false,
                            LocationId = 10,
                            Url = "url_van_afbeelding_20"
                        });
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Landlord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique()
                        .HasFilter("[AvatarId] IS NOT NULL");

                    b.ToTable("Landlords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 40,
                            AvatarId = 1,
                            FirstName = "John",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            Age = 35,
                            AvatarId = 2,
                            FirstName = "Jane",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            Age = 45,
                            AvatarId = 3,
                            FirstName = "Alice",
                            LastName = "Johnson"
                        });
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Features")
                        .HasColumnType("int");

                    b.Property<int>("LandlordId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<float>("PricePerDay")
                        .HasColumnType("real");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Een mooi appartement in het hart van de stad.",
                            Features = 3,
                            LandlordId = 1,
                            NumberOfGuests = 4,
                            PricePerDay = 100f,
                            Rooms = 2,
                            SubTitle = "Centraal gelegen",
                            Title = "Gezellig appartement",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Een ruime villa direct aan het strand met alle luxe voorzieningen.",
                            Features = 3,
                            LandlordId = 1,
                            NumberOfGuests = 10,
                            PricePerDay = 500f,
                            Rooms = 5,
                            SubTitle = "Prachtig Uitzicht",
                            Title = "Luxe Villa aan Zee",
                            Type = 3
                        },
                        new
                        {
                            Id = 3,
                            Description = "Een knusse hotel verscholen in het bos, perfect voor natuurliefhebbers.",
                            Features = 1,
                            LandlordId = 2,
                            NumberOfGuests = 2,
                            PricePerDay = 80f,
                            Rooms = 1,
                            SubTitle = "Omringd door Natuur",
                            Title = "Gezellige hotel in het Bos",
                            Type = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "Een prachtig gerestaureerd herenhuis met historische kenmerken en moderne voorzieningen.",
                            Features = 7,
                            LandlordId = 2,
                            NumberOfGuests = 8,
                            PricePerDay = 300f,
                            Rooms = 6,
                            SubTitle = "Charmant en Elegant",
                            Title = "Historisch Herenhuis",
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Een gezellig boerderijtje op het platteland, omgeven door groene velden en rustieke charme.",
                            Features = 3,
                            LandlordId = 3,
                            NumberOfGuests = 6,
                            PricePerDay = 150f,
                            Rooms = 4,
                            SubTitle = "Rustieke Schoonheid",
                            Title = "Landelijk Boerderijtje",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Een trendy loft-appartement met strakke lijnen en moderne inrichting, perfect voor een stedelijke ervaring.",
                            Features = 3,
                            LandlordId = 3,
                            NumberOfGuests = 2,
                            PricePerDay = 150f,
                            Rooms = 1,
                            SubTitle = "Stijlvol en Comfortabel",
                            Title = "Moderne Loft in het Stadscentrum",
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Een afgelegen chalet hoog in de bergen, met panoramisch uitzicht op de omliggende natuur en alle luxe voorzieningen voor een onvergetelijk verblijf.",
                            Features = 7,
                            LandlordId = 1,
                            NumberOfGuests = 6,
                            PricePerDay = 250f,
                            Rooms = 3,
                            SubTitle = "Adembenemend Uitzicht",
                            Title = "Exclusieve Bergchalet",
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Een charmant strandhuisje met voldoende ruimte voor het hele gezin, op slechts een steenworp afstand van het zand en de golven.",
                            Features = 7,
                            LandlordId = 2,
                            NumberOfGuests = 8,
                            PricePerDay = 200f,
                            Rooms = 4,
                            SubTitle = "Direct aan Zee",
                            Title = "Gezinsvriendelijk Strandhuis",
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Een betoverende boomhut op een afgelegen locatie, perfect voor een romantisch uitje midden in de natuur met alle moderne gemakken.",
                            Features = 2,
                            LandlordId = 3,
                            NumberOfGuests = 2,
                            PricePerDay = 120f,
                            Rooms = 1,
                            SubTitle = "Omgeven door Natuur",
                            Title = "Romantische Boomhut Retreat",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "Een pittoreske bungalow direct aan het meer, omgeven door rust en natuurlijke schoonheid, perfect voor een ontspannen vakantie weg van de drukte van het stadsleven.",
                            Features = 3,
                            LandlordId = 1,
                            NumberOfGuests = 4,
                            PricePerDay = 180f,
                            Rooms = 2,
                            SubTitle = "Idyllisch Uitzicht",
                            Title = "Sfeervolle Bungalow aan het Meer",
                            Type = 1
                        });
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Discount = 10f,
                            EndDate = new DateTime(2024, 6, 25, 11, 26, 47, 905, DateTimeKind.Local).AddTicks(6884),
                            LocationId = 1,
                            StartDate = new DateTime(2024, 6, 18, 11, 26, 47, 905, DateTimeKind.Local).AddTicks(6831)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Discount = 5f,
                            EndDate = new DateTime(2024, 7, 5, 11, 26, 47, 905, DateTimeKind.Local).AddTicks(6892),
                            LocationId = 2,
                            StartDate = new DateTime(2024, 6, 28, 11, 26, 47, 905, DateTimeKind.Local).AddTicks(6889)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            Discount = 15f,
                            EndDate = new DateTime(2024, 7, 15, 11, 26, 47, 905, DateTimeKind.Local).AddTicks(6897),
                            LocationId = 3,
                            StartDate = new DateTime(2024, 7, 8, 11, 26, 47, 905, DateTimeKind.Local).AddTicks(6895)
                        });
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Image", b =>
                {
                    b.HasOne("CadvancedOpdracht.Models.Landlord", "Landlord")
                        .WithMany()
                        .HasForeignKey("LandlordId");

                    b.HasOne("CadvancedOpdracht.Models.Location", "Location")
                        .WithMany("Images")
                        .HasForeignKey("LocationId");

                    b.Navigation("Landlord");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Landlord", b =>
                {
                    b.HasOne("CadvancedOpdracht.Models.Image", "Avatar")
                        .WithOne()
                        .HasForeignKey("CadvancedOpdracht.Models.Landlord", "AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Location", b =>
                {
                    b.HasOne("CadvancedOpdracht.Models.Landlord", "Landlord")
                        .WithMany("Locations")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landlord");
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Reservation", b =>
                {
                    b.HasOne("CadvancedOpdracht.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CadvancedOpdracht.Models.Location", "Location")
                        .WithMany("Reservations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Landlord", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("CadvancedOpdracht.Models.Location", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
